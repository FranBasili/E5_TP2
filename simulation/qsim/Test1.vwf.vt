// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/11/2023 15:03:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clk;
reg [31:0] data;
reg enwr;
reg inclock;
// wires                                               
wire [31:0] Alu_BusA;
wire [31:0] Alu_BusB;
wire [31:0] Alu_BusC;
wire [9:0] Alu_ctrl;
wire [31:0] Alu_imm;
wire Alu_imm_en;
wire AluZ;
wire [31:0] busA;
wire [31:0] busB;
wire [31:0] busC;
wire ctrl_fetch;
wire global_reset;
wire halt;
wire [31:0] imm;
wire [31:0] instruction;
wire [31:0] outRam;
wire [31:0] PC;
wire [4:0] rd;
wire [5:0] selA;
wire [5:0] selADec;
wire [4:0] selB;
wire [4:0] selBDec;
wire [5:0] selOut;
wire [5:0] selOutDec;

// assign statements (if any)                          
TP2 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.Alu_BusA(Alu_BusA),
	.Alu_BusB(Alu_BusB),
	.Alu_BusC(Alu_BusC),
	.Alu_ctrl(Alu_ctrl),
	.Alu_imm(Alu_imm),
	.Alu_imm_en(Alu_imm_en),
	.AluZ(AluZ),
	.busA(busA),
	.busB(busB),
	.busC(busC),
	.clk(clk),
	.ctrl_fetch(ctrl_fetch),
	.data(data),
	.enwr(enwr),
	.global_reset(global_reset),
	.halt(halt),
	.imm(imm),
	.inclock(inclock),
	.instruction(instruction),
	.outRam(outRam),
	.PC(PC),
	.rd(rd),
	.selA(selA),
	.selADec(selADec),
	.selB(selB),
	.selBDec(selBDec),
	.selOut(selOut),
	.selOutDec(selOutDec)
);
initial 
begin 
#2000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
endmodule

