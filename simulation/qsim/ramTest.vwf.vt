// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2023 23:40:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clk;
reg [31:0] data;
reg enwr;
reg inclock;
// wires                                               
wire [31:0] Alu_BusA;
wire [31:0] Alu_BusB;
wire [31:0] Alu_BusC;
wire [9:0] Alu_ctrl;
wire [31:0] busA;
wire [31:0] busB;
wire [31:0] imm;
wire [31:0] instruction;
wire [31:0] outRam;
wire [11:0] PC;
wire [4:0] rd;
wire [5:0] sel_Out;
wire [5:0] selA;
wire [4:0] selB;
wire [4:0] selB_dec;

// assign statements (if any)                          
TP2 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.Alu_BusA(Alu_BusA),
	.Alu_BusB(Alu_BusB),
	.Alu_BusC(Alu_BusC),
	.Alu_ctrl(Alu_ctrl),
	.busA(busA),
	.busB(busB),
	.clk(clk),
	.data(data),
	.enwr(enwr),
	.imm(imm),
	.inclock(inclock),
	.instruction(instruction),
	.outRam(outRam),
	.PC(PC),
	.rd(rd),
	.sel_Out(sel_Out),
	.selA(selA),
	.selB(selB),
	.selB_dec(selB_dec)
);
initial 
begin 
#1000000 $finish;
end 

// inclock
initial
begin
	inclock = 1'b1;
	# 2000;
	repeat(99)
	begin
		inclock = 1'b0;
		inclock = #5000 1'b1;
		# 5000;
	end
	inclock = 1'b0;
	inclock = #5000 1'b1;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #640000 1'b1;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #320000 1'b1;
	address[5] = #320000 1'b0;
	address[5] = #320000 1'b1;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
	address[4] = #160000 1'b1;
	# 160000;
	repeat(2)
	begin
		address[4] = 1'b0;
		address[4] = #160000 1'b1;
		# 160000;
	end
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #100000 1'b1;
	address[3] = #60000 1'b0;
	address[3] = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		address[3] = 1'b0;
		address[3] = #80000 1'b1;
		# 80000;
	end
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
	address[2] = #40000 1'b1;
	address[2] = #20000 1'b0;
	address[2] = #60000 1'b1;
	# 40000;
	repeat(10)
	begin
		address[2] = 1'b0;
		address[2] = #40000 1'b1;
		# 40000;
	end
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
	address[1] = #20000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #40000 1'b1;
	address[1] = #40000 1'b0;
	address[1] = #20000 1'b1;
	# 20000;
	repeat(21)
	begin
		address[1] = 1'b0;
		address[1] = #20000 1'b1;
		# 20000;
	end
end 
// address[ 0 ]
initial
begin
	repeat(3)
	begin
		address[0] = 1'b0;
		address[0] = #10000 1'b1;
		# 10000;
	end
	address[0] = 1'b0;
	address[0] = #10000 1'b1;
	address[0] = #10000 1'b0;
	address[0] = #10000 1'b1;
	address[0] = #10000 1'b0;
	address[0] = #10000 1'b1;
	# 10000;
	repeat(44)
	begin
		address[0] = 1'b0;
		address[0] = #10000 1'b1;
		# 10000;
	end
end 
// data[ 31 ]
initial
begin
	data[31] = 1'b0;
end 
// data[ 30 ]
initial
begin
	data[30] = 1'b0;
end 
// data[ 29 ]
initial
begin
	data[29] = 1'b0;
end 
// data[ 28 ]
initial
begin
	data[28] = 1'b0;
end 
// data[ 27 ]
initial
begin
	data[27] = 1'b0;
end 
// data[ 26 ]
initial
begin
	data[26] = 1'b0;
end 
// data[ 25 ]
initial
begin
	data[25] = 1'b0;
end 
// data[ 24 ]
initial
begin
	data[24] = 1'b0;
end 
// data[ 23 ]
initial
begin
	data[23] = 1'b0;
end 
// data[ 22 ]
initial
begin
	data[22] = 1'b0;
end 
// data[ 21 ]
initial
begin
	data[21] = 1'b0;
end 
// data[ 20 ]
initial
begin
	data[20] = 1'b0;
end 
// data[ 19 ]
initial
begin
	data[19] = 1'b0;
end 
// data[ 18 ]
initial
begin
	data[18] = 1'b0;
end 
// data[ 17 ]
initial
begin
	data[17] = 1'b0;
end 
// data[ 16 ]
initial
begin
	data[16] = 1'b0;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b0;
end 
// data[ 10 ]
initial
begin
	data[10] = 1'b0;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b0;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
	data[6] = #640000 1'b1;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
	data[5] = #320000 1'b1;
	data[5] = #320000 1'b0;
	data[5] = #320000 1'b1;
end 
// data[ 4 ]
initial
begin
	repeat(3)
	begin
		data[4] = 1'b0;
		data[4] = #160000 1'b1;
		# 160000;
	end
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	repeat(6)
	begin
		data[3] = 1'b0;
		data[3] = #80000 1'b1;
		# 80000;
	end
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	repeat(12)
	begin
		data[2] = 1'b0;
		data[2] = #40000 1'b1;
		# 40000;
	end
	data[2] = 1'b0;
end 
// data[ 1 ]
always
begin
	data[1] = 1'b0;
	data[1] = #20000 1'b1;
	#20000;
end 
// data[ 0 ]
always
begin
	data[0] = 1'b0;
	data[0] = #10000 1'b1;
	#10000;
end 

// enwr
initial
begin
	enwr = 1'b1;
	enwr = #60000 1'b0;
	enwr = #150000 1'b1;
end 
endmodule

